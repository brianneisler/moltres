#!/usr/bin/env node

const path = require('path')

const program = require('commander')

const {
  copyPath,
  download,
  ensureDirectory,
  pathExists,
  unzipAllTo
} = require('../index')

program
  .description('initialize a new project')
  .requiredOption(
    '-n, --projectName [projectName]',
    'The name of the new project'
  )
  .parse(process.argv)

const TEMPLATE_URL =
  'https://github.com/brianneisler/moltres-template/archive/master.zip'

const exec = async ({ projectName }) => {
  console.log(`initializing new project '${projectName}'`)
  const cacheDir = path.resolve(__dirname, '..', '.cache')
  const projectDir = path.resolve(process.cwd(), projectName)
  await Promise.all([ensureDirectory(cacheDir), ensureDirectory(projectDir)])

  // TODO BRN: only download the latest tag and cache the download by tag name
  const cacheFile = path.resolve(cacheDir, 'moltres-template.zip')
  const cacheFileExists = await pathExists(cacheFile)
  if (!cacheFileExists) {
    await download(TEMPLATE_URL, cacheFile)
  }

  const unpackedProjectPath = path.resolve(cacheDir, 'moltres-template-master')
  const unpackedProjectPathExists = await pathExists(unpackedProjectPath)
  if (!unpackedProjectPathExists) {
    await unzipAllTo(cacheFile, cacheDir, true)
  }
  await copyPath(unpackedProjectPath, projectDir)
  console.log(`project '${projectName}' has been initialized`)
}

exec(program)
  .then(() => process.exit())
  .catch((error) => {
    // eslint-disable-next-line no-console
    console.error(error)
    process.exit(1)
  })
